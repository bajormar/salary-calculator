{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Role","times","count","Array","from","keys","App","useState","Developer","role","setRole","name","weight","devSkills","setDevSkills","pmSkills","setPmSkills","teamLeadSkills","setTeamLeadSkills","low","high","devLevels","setDevLevels","teamLeadLevels","setTeamLeadLevels","pmLevels","setPmLevels","isTeamLead","setIsTeamLead","selected","setSelected","teamLeadSelected","setTeamLeadSelected","skills","levels","setSkills","setLevels","cellValues","useMemo","totalWeight","reduce","acc","skill","map","Math","floor","slice","level","range","teamLeadCellValues","salary","columnSelectedLevel","index","columnAcc","levelIndex","teamLeadSalary","totalSalary","getSalaryRanges","sal","className","type","onClick","ProjectManager","checked","onChange","e","defaultValue","prevState","newState","find","item","Number","target","value","skillIndex","style","background","l","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac51f221.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport \"./App.css\";\n\nexport const times = (count: number) => Array.from(Array(count).keys());\n\nenum Role {\n  Developer = \"DEV\",\n  ProjectManager = \"PM\",\n}\nfunction App() {\n  const [role, setRole] = useState(Role.Developer);\n\n  const [devSkills, setDevSkills] = useState([\n    { name: \"Autonomy\", weight: 0.2 },\n    { name: \"Delivery\", weight: 0.2 },\n    { name: \"Growth\", weight: 0.2 },\n    { name: \"Job knowledge\", weight: 0.2 },\n    { name: \"Soft skills\", weight: 0.2 },\n  ]);\n\n  const [pmSkills, setPmSkills] = useState([\n    { name: \"Capabilities\", weight: 0.2 },\n    { name: \"Quality of work\", weight: 0.2 },\n    { name: \"Communication\", weight: 0.2 },\n    { name: \"Autonomy\", weight: 0.2 },\n    { name: \"Job Knowledge / Growth / Initiative\", weight: 0.2 },\n  ]);\n\n  const [teamLeadSkills, setTeamLeadSkills] = useState([\n    { name: \"Hiring\", weight: 0.2 },\n    { name: \"TechLead\", weight: 0.2 },\n    { name: \"Team management\", weight: 0.2 },\n    { name: \"Soft skills\", weight: 0.2 },\n    { name: \"Mentoring\", weight: 0.2 },\n  ]);\n\n  const [devLevels, setDevLevels] = useState([\n    { name: \"JUNIOR_1\", low: 1000 },\n    { name: \"JUNIOR_2\", low: 1000, high: 1500 },\n    { name: \"DEV_1\", low: 1500, high: 1850 },\n    { name: \"DEV_2\", low: 1850, high: 2200 },\n    { name: \"SENIOR_1\", low: 2200, high: 2800 },\n    { name: \"SENIOR_2\", low: 2800, high: 3400 },\n  ]);\n\n  const [teamLeadLevels, setTeamLeadLevels] = useState([\n    { name: \"LEAD_1\", low: 500 },\n    { name: \"LEAD_2\", low: 500, high: 1000 },\n  ]);\n\n  const [pmLevels, setPmLevels] = useState([\n    { name: \"JUNIOR_1\", low: 1149 },\n    { name: \"JUNIOR_2\", low: 1149, high: 1573 },\n    { name: \"PM_1\", low: 1573, high: 1766 },\n    { name: \"PM_2\", low: 1766, high: 2359 },\n    { name: \"SENIOR_1\", low: 2359, high: 2878 },\n    { name: \"SENIOR_2\", low: 2878, high: 3397 },\n  ]);\n\n  const [isTeamLead, setIsTeamLead] = useState(false);\n\n  const [selected, setSelected] = useState([0, 0, 0, 0, 0]);\n  const [teamLeadSelected, setTeamLeadSelected] = useState([0, 0, 0, 0, 0]);\n\n  const skills = role === Role.Developer ? devSkills : pmSkills;\n  const levels = role === Role.Developer ? devLevels : pmLevels;\n  const setSkills = role === Role.Developer ? setDevSkills : setPmSkills;\n  const setLevels = role === Role.Developer ? setDevLevels : setPmLevels;\n\n  const cellValues = useMemo(() => {\n    const totalWeight = skills.reduce((acc, skill) => acc + skill.weight, 0);\n    const junior1Values = skills.map((skill) => {\n      return Math.floor((levels[0].low / totalWeight) * skill.weight);\n    });\n\n    return [\n      junior1Values,\n      ...levels.slice(1).map((level) => {\n        const range = level.high! - level.low;\n        return skills.map((skill) => {\n          return Math.floor((range / totalWeight) * skill.weight);\n        });\n      }),\n    ];\n  }, [skills, levels]);\n\n  const teamLeadCellValues = useMemo(() => {\n    const totalWeight = teamLeadSkills.reduce(\n      (acc, skill) => acc + skill.weight,\n      0\n    );\n    const lead11Values = teamLeadSkills.map((skill) => {\n      return Math.floor((teamLeadLevels[0].low / totalWeight) * skill.weight);\n    });\n\n    return [\n      lead11Values,\n      ...teamLeadLevels.slice(1).map((level) => {\n        const range = level.high! - level.low;\n        return teamLeadSkills.map((skill) => {\n          return Math.floor((range / totalWeight) * skill.weight);\n        });\n      }),\n    ];\n  }, [teamLeadLevels, teamLeadSkills]);\n\n  const salary = useMemo(() => {\n    return selected.reduce((acc, columnSelectedLevel, index) => {\n      const columnSum = times(columnSelectedLevel + 1).reduce(\n        (columnAcc, levelIndex) => {\n          return columnAcc + cellValues[levelIndex][index];\n        },\n        0\n      );\n\n      return acc + columnSum;\n    }, 0);\n  }, [cellValues, selected]);\n\n  const teamLeadSalary = useMemo(() => {\n    return teamLeadSelected.reduce((acc, columnSelectedLevel, index) => {\n      const columnSum = times(columnSelectedLevel + 1).reduce(\n        (columnAcc, levelIndex) => {\n          return columnAcc + teamLeadCellValues[levelIndex][index];\n        },\n        0\n      );\n\n      return acc + columnSum;\n    }, 0);\n  }, [teamLeadCellValues, teamLeadSelected]);\n\n  const totalSalary = salary + teamLeadSalary;\n\n  const getSalaryRanges = (sal: number) => {\n    return `${sal - sal * 0.1} - ${sal + sal * 0.1}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"Settings-Row\">\n        <div>\n          <h2>Choose role</h2>\n          <button\n            type=\"button\"\n            className={`RoleButton ${\n              role === Role.Developer ? \"RoleButton-active\" : \"\"\n            }`}\n            onClick={() => setRole(Role.Developer)}\n          >\n            Developer\n          </button>\n          <button\n            type=\"button\"\n            className={`RoleButton ${\n              role === Role.ProjectManager ? \"RoleButton-active\" : \"\"\n            }`}\n            onClick={() => setRole(Role.ProjectManager)}\n          >\n            Project manager\n          </button>\n        </div>\n\n        {role === Role.Developer && (\n          <div>\n            <div>Is team lead?</div>\n            <input\n              type=\"checkbox\"\n              checked={isTeamLead}\n              onChange={(e) => {\n                setIsTeamLead(!isTeamLead);\n              }}\n            />\n          </div>\n        )}\n      </div>\n      <div className=\"Row\">\n        <table>\n          <thead>\n            <tr>\n              <th>Skills</th>\n              <th>Weight</th>\n            </tr>\n          </thead>\n          <tbody>\n            {skills.map((skill) => (\n              <tr key={skill.name}>\n                <td>{skill.name}</td>\n                <td>\n                  <input\n                    type=\"text\"\n                    defaultValue={skill.weight}\n                    onChange={(e) => {\n                      setSkills((prevState) => {\n                        const newState = [...prevState];\n                        const skillToEdit = newState.find(\n                          (item) => item.name === skill.name\n                        );\n                        skillToEdit!.weight = Number(e.target.value || 0) || 0;\n                        return newState;\n                      });\n                    }}\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        {role === Role.Developer && isTeamLead && (\n          <table>\n            <thead>\n              <tr>\n                <th>Team lead skills</th>\n                <th>Weight</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teamLeadSkills.map((skill) => (\n                <tr key={skill.name}>\n                  <td>{skill.name}</td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      defaultValue={skill.weight}\n                      onChange={(e) => {\n                        setTeamLeadSkills((prevState) => {\n                          const newState = [...prevState];\n                          const skillToEdit = newState.find(\n                            (item) => item.name === skill.name\n                          );\n                          skillToEdit!.weight =\n                            Number(e.target.value || 0) || 0;\n                          return newState;\n                        });\n                      }}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n      <div className=\"Row\">\n        <table>\n          <thead>\n            <tr>\n              <th>Level</th>\n              {skills.map((skill) => (\n                <th key={skill.name}>{skill.name}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {levels.map((level, levelIndex) => (\n              <tr key={level.name}>\n                <td>{level.name}</td>\n                {skills.map((skill, skillIndex) => (\n                  <td\n                    key={skill.name}\n                    style={\n                      levelIndex <= selected[skillIndex]\n                        ? { background: \"lightblue\" }\n                        : {}\n                    }\n                    onClick={() =>\n                      setSelected((prevState) => {\n                        const newState = [...prevState];\n                        newState[skillIndex] = levelIndex;\n                        return newState;\n                      })\n                    }\n                  >\n                    {cellValues[levelIndex][skillIndex]}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <table>\n          <thead>\n            <tr>\n              <th>Level</th>\n              <th>Low</th>\n              <th>High</th>\n            </tr>\n          </thead>\n          <tbody>\n            {levels.map((level) => {\n              return (\n                <tr key={level.name}>\n                  <td>\n                    {level.name === \"JUNIOR_1\"\n                      ? `${level.name} (Base)`\n                      : level.name}\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={level.low}\n                      onChange={(e) => {\n                        setLevels((prevState) => {\n                          const newState = [...prevState];\n                          const levelToEdit = newState.find(\n                            (l) => l.name === level.name\n                          );\n                          levelToEdit!.low = Number(e.target.value || 0) || 0;\n                          return newState;\n                        });\n                      }}\n                    />\n                  </td>\n                  <td>\n                    {level.name !== \"JUNIOR_1\" && (\n                      <input\n                        type=\"text\"\n                        value={level.high}\n                        onChange={(e) => {\n                          setLevels((prevState) => {\n                            const newState = [...prevState];\n                            const levelToEdit = newState.find(\n                              (l) => l.name === level.name\n                            );\n                            levelToEdit!.high =\n                              Number(e.target.value || 0) || 0;\n                            return newState;\n                          });\n                        }}\n                      />\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <div>Salary: {getSalaryRanges(salary)} EUR</div>\n      </div>\n      {role === Role.Developer && isTeamLead && (\n        <>\n          <div className=\"Row\">\n            <table>\n              <thead>\n                <tr>\n                  <th></th>\n                  {teamLeadSkills.map((skill) => (\n                    <th key={skill.name}>{skill.name}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {teamLeadLevels.map((level, levelIndex) => (\n                  <tr key={level.name}>\n                    <td>{level.name}</td>\n                    {teamLeadSkills.map((skill, skillIndex) => (\n                      <td\n                        key={skill.name}\n                        style={\n                          levelIndex <= teamLeadSelected[skillIndex]\n                            ? { background: \"lightblue\" }\n                            : {}\n                        }\n                        onClick={() =>\n                          setTeamLeadSelected((prevState) => {\n                            const newState = [...prevState];\n                            newState[skillIndex] = levelIndex;\n                            return newState;\n                          })\n                        }\n                      >\n                        {teamLeadCellValues[levelIndex][skillIndex]}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <table>\n              <thead>\n                <tr>\n                  <th>Level</th>\n                  <th>Low</th>\n                  <th>High</th>\n                </tr>\n              </thead>\n              <tbody>\n                {teamLeadLevels.map((level) => {\n                  return (\n                    <tr key={level.name}>\n                      <td>\n                        {level.name === \"LEAD_1\"\n                          ? `${level.name} (Base)`\n                          : level.name}\n                      </td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          value={level.low}\n                          onChange={(e) => {\n                            setTeamLeadLevels((prevState) => {\n                              const newState = [...prevState];\n                              const levelToEdit = newState.find(\n                                (l) => l.name === level.name\n                              );\n                              levelToEdit!.low =\n                                Number(e.target.value || 0) || 0;\n                              return newState;\n                            });\n                          }}\n                        />\n                      </td>\n                      <td>\n                        {level.name !== \"LEAD_1\" && (\n                          <input\n                            type=\"text\"\n                            value={level.high}\n                            onChange={(e) => {\n                              setTeamLeadLevels((prevState) => {\n                                const newState = [...prevState];\n                                const levelToEdit = newState.find(\n                                  (l) => l.name === level.name\n                                );\n                                levelToEdit!.high =\n                                  Number(e.target.value || 0) || 0;\n                                return newState;\n                              });\n                            }}\n                          />\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div>Team lead salary: {getSalaryRanges(teamLeadSalary)} EUR</div>\n          </div>\n          <div className=\"Row\">\n            <div />\n            <div />\n            <div>Total salary: {getSalaryRanges(totalSalary)} EUR</div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}