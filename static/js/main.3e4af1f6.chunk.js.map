{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Role","devCells","pmCells","teamLeadCells","times","count","Array","from","keys","App","useState","Developer","role","setRole","name","low","high","devLevels","setDevLevels","teamLeadLevels","setTeamLeadLevels","pmLevels","setPmLevels","isTeamLead","setIsTeamLead","selected","setSelected","teamLeadSelected","setTeamLeadSelected","cells","levels","setLevels","cellValues","useMemo","Math","floor","length","slice","map","level","range","value","teamLeadCellValues","salary","reduce","acc","cur","index","x","y","teamLeadSalary","totalSalary","getSalaryRanges","sal","className","type","onClick","ProjectManager","cell","levelIndex","cellIndex","style","background","prevState","newState","onChange","e","find","l","Number","target","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e4af1f6.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport \"./App.css\";\n\nconst devCells = [\n  \"Autonomy\",\n  \"Delivery\",\n  \"Growth\",\n  \"Job knowledge\",\n  \"Soft skills\",\n];\n\nconst pmCells = [\n  \"Capabilities\",\n  \"Quality of work\",\n  \"Communication\",\n  \"Autonomy\",\n  \"Job Knowledge / Growth / Initiative\",\n];\n\nconst teamLeadCells = [\n  \"Hiring\",\n  \"TechLead\",\n  \"Team management\",\n  \"Soft skills\",\n  \"Mentoring\",\n];\n\nexport const times = (count: number) => Array.from(Array(count).keys());\n\nenum Role {\n  Developer = \"DEV\",\n  ProjectManager = \"PM\",\n}\nfunction App() {\n  const [role, setRole] = useState(Role.Developer);\n\n  const [devLevels, setDevLevels] = useState([\n    { name: \"JUNIOR_1\", low: 1000 },\n    { name: \"JUNIOR_2\", low: 1000, high: 1500 },\n    { name: \"DEV_1\", low: 1500, high: 1850 },\n    { name: \"DEV_2\", low: 1850, high: 2200 },\n    { name: \"SENIOR_1\", low: 2200, high: 2800 },\n    { name: \"SENIOR_2\", low: 2800, high: 3400 },\n  ]);\n\n  const [teamLeadLevels, setTeamLeadLevels] = useState([\n    { name: \"LEAD_1\", low: 500 },\n    { name: \"LEAD_2\", low: 500, high: 1000 },\n  ]);\n\n  const [pmLevels, setPmLevels] = useState([\n    { name: \"JUNIOR_1\", low: 1149 },\n    { name: \"JUNIOR_2\", low: 1149, high: 1573 },\n    { name: \"PM_1\", low: 1573, high: 1766 },\n    { name: \"PM_2\", low: 1766, high: 2359 },\n    { name: \"SENIOR_1\", low: 2359, high: 2878 },\n    { name: \"SENIOR_2\", low: 2878, high: 3397 },\n  ]);\n\n  const [isTeamLead, setIsTeamLead] = useState(false);\n\n  const [selected, setSelected] = useState([0, 0, 0, 0, 0]);\n  const [teamLeadSelected, setTeamLeadSelected] = useState([0, 0, 0, 0, 0]);\n\n  const cells = role === Role.Developer ? devCells : pmCells;\n  const levels = role === Role.Developer ? devLevels : pmLevels;\n  const setLevels = role === Role.Developer ? setDevLevels : setPmLevels;\n\n  const cellValues = useMemo(() => {\n    const junior1Values = [\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n    ];\n\n    return [\n      junior1Values,\n      ...levels.slice(1).map((level) => {\n        const range = level.high! - level.low;\n        const value = Math.floor(range / cells.length);\n        return times(cells.length + 1).map(() => value);\n      }),\n    ];\n  }, [cells, levels]);\n\n  const teamLeadCellValues = useMemo(() => {\n    const lead11Values = [\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n    ];\n\n    return [\n      lead11Values,\n      ...teamLeadLevels.slice(1).map((level) => {\n        const range = level.high! - level.low;\n        const value = Math.floor(range / teamLeadCells.length);\n        return times(teamLeadCells.length + 1).map(() => value);\n      }),\n    ];\n  }, [teamLeadLevels]);\n\n  const salary = useMemo(() => {\n    return selected.reduce((acc, cur, index) => {\n      const z = times(cur + 1);\n      return (\n        acc +\n        z.reduce((x, y) => {\n          return x + cellValues[y][index];\n        }, 0)\n      );\n    }, 0);\n  }, [cellValues, selected]);\n\n  const teamLeadSalary = useMemo(() => {\n    return teamLeadSelected.reduce((acc, cur, index) => {\n      const z = times(cur + 1);\n      return (\n        acc +\n        z.reduce((x, y) => {\n          return x + teamLeadCellValues[y][index];\n        }, 0)\n      );\n    }, 0);\n  }, [teamLeadCellValues, teamLeadSelected]);\n\n  const totalSalary = salary + teamLeadSalary;\n\n  const getSalaryRanges = (sal: number) => {\n    return `${sal - sal * 0.1} - ${sal + sal * 0.1}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h2>Choose role</h2>\n        <button\n          type=\"button\"\n          className={`RoleButton ${\n            role === Role.Developer ? \"RoleButton-active\" : \"\"\n          }`}\n          onClick={() => setRole(Role.Developer)}\n        >\n          Developer\n        </button>\n        <button\n          type=\"button\"\n          className={`RoleButton ${\n            role === Role.ProjectManager ? \"RoleButton-active\" : \"\"\n          }`}\n          onClick={() => setRole(Role.ProjectManager)}\n        >\n          Project manager\n        </button>\n      </div>\n      <div className=\"Row\">\n        <table>\n          <thead>\n            <tr>\n              <th>Level</th>\n              {cells.map((cell) => (\n                <th key={cell}>{cell}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {levels.map((level, levelIndex) => (\n              <tr key={level.name}>\n                <td>{level.name}</td>\n                {cells.map((cell, cellIndex) => (\n                  <td\n                    key={cell}\n                    style={\n                      levelIndex <= selected[cellIndex]\n                        ? { background: \"lightblue\" }\n                        : {}\n                    }\n                    onClick={() =>\n                      setSelected((prevState) => {\n                        const newState = [...prevState];\n                        newState[cellIndex] = levelIndex;\n                        return newState;\n                      })\n                    }\n                  >\n                    {cellValues[levelIndex][cellIndex]}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <table>\n          <thead>\n            <tr>\n              <th>Level</th>\n              <th>Low</th>\n              <th>High</th>\n            </tr>\n          </thead>\n          <tbody>\n            {levels.map((level) => {\n              return (\n                <tr key={level.name}>\n                  <td>\n                    {level.name === \"JUNIOR_1\"\n                      ? `${level.name} (Base)`\n                      : level.name}\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={level.low}\n                      onChange={(e) => {\n                        setLevels((prevState) => {\n                          const newState = [...prevState];\n                          const levelToEdit = newState.find(\n                            (l) => l.name === level.name\n                          );\n                          levelToEdit!.low = Number(e.target.value || 0) || 0;\n                          return newState;\n                        });\n                      }}\n                    />\n                  </td>\n                  <td>\n                    {level.name !== \"JUNIOR_1\" && (\n                      <input\n                        type=\"text\"\n                        value={level.high}\n                        onChange={(e) => {\n                          setLevels((prevState) => {\n                            const newState = [...prevState];\n                            const levelToEdit = newState.find(\n                              (l) => l.name === level.name\n                            );\n                            levelToEdit!.high =\n                              Number(e.target.value || 0) || 0;\n                            return newState;\n                          });\n                        }}\n                      />\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <div>Salary: {getSalaryRanges(salary)} EUR</div>\n      </div>\n      {role === Role.Developer && (\n        <>\n          <div className=\"Row\">\n            <div>\n              <div>Is team lead?</div>\n              <input\n                type=\"checkbox\"\n                checked={isTeamLead}\n                onChange={(e) => {\n                  setIsTeamLead(!isTeamLead);\n                }}\n              />\n            </div>\n          </div>\n          {isTeamLead && (\n            <>\n              <div className=\"Row\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th></th>\n                      {teamLeadCells.map((cell) => (\n                        <th key={cell}>{cell}</th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {teamLeadLevels.map((level, levelIndex) => (\n                      <tr key={level.name}>\n                        <td>{level.name}</td>\n                        {teamLeadCells.map((cell, cellIndex) => (\n                          <td\n                            key={cell}\n                            style={\n                              levelIndex <= teamLeadSelected[cellIndex]\n                                ? { background: \"lightblue\" }\n                                : {}\n                            }\n                            onClick={() =>\n                              setTeamLeadSelected((prevState) => {\n                                const newState = [...prevState];\n                                newState[cellIndex] = levelIndex;\n                                return newState;\n                              })\n                            }\n                          >\n                            {teamLeadCellValues[levelIndex][cellIndex]}\n                          </td>\n                        ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n                <table>\n                  <thead>\n                    <tr>\n                      <th>Level</th>\n                      <th>Low</th>\n                      <th>High</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {teamLeadLevels.map((level) => {\n                      return (\n                        <tr key={level.name}>\n                          <td>\n                            {level.name === \"LEAD_1\"\n                              ? `${level.name} (Base)`\n                              : level.name}\n                          </td>\n                          <td>\n                            <input\n                              type=\"text\"\n                              value={level.low}\n                              onChange={(e) => {\n                                setTeamLeadLevels((prevState) => {\n                                  const newState = [...prevState];\n                                  const levelToEdit = newState.find(\n                                    (l) => l.name === level.name\n                                  );\n                                  levelToEdit!.low =\n                                    Number(e.target.value || 0) || 0;\n                                  return newState;\n                                });\n                              }}\n                            />\n                          </td>\n                          <td>\n                            {level.name !== \"LEAD_1\" && (\n                              <input\n                                type=\"text\"\n                                value={level.high}\n                                onChange={(e) => {\n                                  setTeamLeadLevels((prevState) => {\n                                    const newState = [...prevState];\n                                    const levelToEdit = newState.find(\n                                      (l) => l.name === level.name\n                                    );\n                                    levelToEdit!.high =\n                                      Number(e.target.value || 0) || 0;\n                                    return newState;\n                                  });\n                                }}\n                              />\n                            )}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n                <div>\n                  Team lead salary: {getSalaryRanges(teamLeadSalary)} EUR\n                </div>\n              </div>\n              <div className=\"Row\">\n                <div />\n                <div />\n                <div>Total salary: {getSalaryRanges(totalSalary)} EUR</div>\n              </div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}