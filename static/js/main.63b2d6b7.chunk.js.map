{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["cells","teamLeadCells","times","count","Array","from","keys","App","useState","name","low","high","levels","setLevels","teamLeadLevels","setTeamLeadLevels","isTeamLead","setIsTeamLead","selected","setSelected","teamLeadSelected","setTeamLeadSelected","cellValues","useMemo","Math","floor","length","slice","map","level","range","value","teamLeadCellValues","salary","reduce","acc","cur","index","x","y","teamLeadSalary","totalSalary","getSalaryRanges","sal","className","cell","levelIndex","cellIndex","style","background","onClick","prevState","newState","type","onChange","e","find","l","Number","target","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAGMA,G,MAAQ,CACZ,WACA,WACA,SACA,gBACA,gBAGIC,EAAgB,CACpB,SACA,WACA,kBACA,cACA,aAGWC,EAAQ,SAACC,GAAD,OAAmBC,MAAMC,KAAKD,MAAMD,GAAOG,SAsTjDC,MApTf,WAAgB,IAAD,EACeC,mBAAS,CACnC,CAAEC,KAAM,WAAYC,IAAK,KACzB,CAAED,KAAM,WAAYC,IAAK,IAAMC,KAAM,MACrC,CAAEF,KAAM,QAASC,IAAK,KAAMC,KAAM,MAClC,CAAEF,KAAM,QAASC,IAAK,KAAMC,KAAM,MAClC,CAAEF,KAAM,WAAYC,IAAK,KAAMC,KAAM,MACrC,CAAEF,KAAM,WAAYC,IAAK,KAAMC,KAAM,QAP1B,mBACNC,EADM,KACEC,EADF,OAU+BL,mBAAS,CACnD,CAAEC,KAAM,SAAUC,IAAK,KACvB,CAAED,KAAM,SAAUC,IAAK,IAAKC,KAAM,OAZvB,mBAUNG,EAVM,KAUUC,EAVV,OAeuBP,oBAAS,GAfhC,mBAeNQ,EAfM,KAeMC,EAfN,OAiBmBT,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAjBzC,mBAiBNU,EAjBM,KAiBIC,EAjBJ,OAkBmCX,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAlBzD,mBAkBNY,EAlBM,KAkBYC,EAlBZ,KAoBPC,EAAaC,mBAAQ,WASzB,MAAM,CARgB,CACpBC,KAAKC,MAAMb,EAAO,GAAGF,IAAMV,EAAM0B,QACjCF,KAAKC,MAAMb,EAAO,GAAGF,IAAMV,EAAM0B,QACjCF,KAAKC,MAAMb,EAAO,GAAGF,IAAMV,EAAM0B,QACjCF,KAAKC,MAAMb,EAAO,GAAGF,IAAMV,EAAM0B,QACjCF,KAAKC,MAAMb,EAAO,GAAGF,IAAMV,EAAM0B,UAGnC,mBAEKd,EAAOe,MAAM,GAAGC,KAAI,SAACC,GACtB,IAAMC,EAAQD,EAAMlB,KAAQkB,EAAMnB,IAC5BqB,EAAQP,KAAKC,MAAMK,EAAQ9B,EAAM0B,QACvC,OAAOxB,EAAMF,EAAM0B,OAAS,GAAGE,KAAI,kBAAMG,YAG5C,CAACnB,IAEEoB,EAAqBT,mBAAQ,WASjC,MAAM,CARe,CACnBC,KAAKC,MAAMX,EAAe,GAAGJ,IAAMT,EAAcyB,QACjDF,KAAKC,MAAMX,EAAe,GAAGJ,IAAMT,EAAcyB,QACjDF,KAAKC,MAAMX,EAAe,GAAGJ,IAAMT,EAAcyB,QACjDF,KAAKC,MAAMX,EAAe,GAAGJ,IAAMT,EAAcyB,QACjDF,KAAKC,MAAMX,EAAe,GAAGJ,IAAMT,EAAcyB,UAGnD,mBAEKZ,EAAea,MAAM,GAAGC,KAAI,SAACC,GAC9B,IAAMC,EAAQD,EAAMlB,KAAQkB,EAAMnB,IAC5BqB,EAAQP,KAAKC,MAAMK,EAAQ7B,EAAcyB,QAC/C,OAAOxB,EAAMD,EAAcyB,OAAS,GAAGE,KAAI,kBAAMG,YAGpD,CAACjB,IAEEmB,EAASV,mBAAQ,WACrB,OAAOL,EAASgB,QAAO,SAACC,EAAKC,EAAKC,GAEhC,OACEF,EAFQjC,EAAMkC,EAAM,GAGlBF,QAAO,SAACI,EAAGC,GACX,OAAOD,EAAIhB,EAAWiB,GAAGF,KACxB,KAEJ,KACF,CAACf,EAAYJ,IAEVsB,EAAiBjB,mBAAQ,WAC7B,OAAOH,EAAiBc,QAAO,SAACC,EAAKC,EAAKC,GAExC,OACEF,EAFQjC,EAAMkC,EAAM,GAGlBF,QAAO,SAACI,EAAGC,GACX,OAAOD,EAAIN,EAAmBO,GAAGF,KAChC,KAEJ,KACF,CAACL,EAAoBZ,IAElBqB,EAAcR,EAASO,EAEvBE,EAAkB,SAACC,GACvB,MAAM,GAAN,OAAUA,EAAY,GAANA,EAAhB,cAA+BA,EAAY,GAANA,IAGvC,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACE,kCACE,gCACE,+BACE,uCACC5C,EAAM4B,KAAI,SAACiB,GAAD,OACT,6BAAgBA,GAAPA,WAIf,gCACGjC,EAAOgB,KAAI,SAACC,EAAOiB,GAAR,OACV,+BACE,6BAAKjB,EAAMpB,OACVT,EAAM4B,KAAI,SAACiB,EAAME,GAAP,OACT,oBAEEC,MACEF,GAAc5B,EAAS6B,GACnB,CAAEE,WAAY,aACd,GAENC,QAAS,kBACP/B,GAAY,SAACgC,GACX,IAAMC,EAAQ,YAAOD,GAErB,OADAC,EAASL,GAAaD,EACfM,MAXb,SAeG9B,EAAWwB,GAAYC,IAdnBF,QAJFhB,EAAMpB,cAyBrB,kCACE,gCACE,+BACE,uCACA,qCACA,2CAGJ,gCACGG,EAAOgB,KAAI,SAACC,GACX,OACE,+BACE,6BACkB,aAAfA,EAAMpB,KAAN,UACMoB,EAAMpB,KADZ,WAEGoB,EAAMpB,OAEZ,6BACE,uBACE4C,KAAK,OACLtB,MAAOF,EAAMnB,IACb4C,SAAU,SAACC,GACT1C,GAAU,SAACsC,GACT,IAAMC,EAAQ,YAAOD,GAKrB,OAJoBC,EAASI,MAC3B,SAACC,GAAD,OAAOA,EAAEhD,OAASoB,EAAMpB,QAEbC,IAAMgD,OAAOH,EAAEI,OAAO5B,OAAS,IAAM,EAC3CqB,UAKf,6BACkB,aAAfvB,EAAMpB,MACL,uBACE4C,KAAK,OACLtB,MAAOF,EAAMlB,KACb2C,SAAU,SAACC,GACT1C,GAAU,SAACsC,GACT,IAAMC,EAAQ,YAAOD,GAMrB,OALoBC,EAASI,MAC3B,SAACC,GAAD,OAAOA,EAAEhD,OAASoB,EAAMpB,QAEbE,KACX+C,OAAOH,EAAEI,OAAO5B,OAAS,IAAM,EAC1BqB,YAnCVvB,EAAMpB,cA8CvB,2CAAciC,EAAgBT,GAA9B,aAEF,qBAAKW,UAAU,MAAf,SACE,gCACE,gDACA,uBACES,KAAK,WACLO,QAAS5C,EACTsC,SAAU,SAACC,GACTtC,GAAeD,WAKtBA,GACC,qCACE,sBAAK4B,UAAU,MAAf,UACE,kCACE,gCACE,+BACE,uBACC3C,EAAc2B,KAAI,SAACiB,GAAD,OACjB,6BAAgBA,GAAPA,WAIf,gCACG/B,EAAec,KAAI,SAACC,EAAOiB,GAAR,OAClB,+BACE,6BAAKjB,EAAMpB,OACVR,EAAc2B,KAAI,SAACiB,EAAME,GAAP,OACjB,oBAEEC,MACEF,GAAc1B,EAAiB2B,GAC3B,CAAEE,WAAY,aACd,GAENC,QAAS,kBACP7B,GAAoB,SAAC8B,GACnB,IAAMC,EAAQ,YAAOD,GAErB,OADAC,EAASL,GAAaD,EACfM,MAXb,SAeGpB,EAAmBc,GAAYC,IAd3BF,QAJFhB,EAAMpB,cAyBrB,kCACE,gCACE,+BACE,uCACA,qCACA,2CAGJ,gCACGK,EAAec,KAAI,SAACC,GACnB,OACE,+BACE,6BACkB,WAAfA,EAAMpB,KAAN,UACMoB,EAAMpB,KADZ,WAEGoB,EAAMpB,OAEZ,6BACE,uBACE4C,KAAK,OACLtB,MAAOF,EAAMnB,IACb4C,SAAU,SAACC,GACTxC,GAAkB,SAACoC,GACjB,IAAMC,EAAQ,YAAOD,GAMrB,OALoBC,EAASI,MAC3B,SAACC,GAAD,OAAOA,EAAEhD,OAASoB,EAAMpB,QAEbC,IACXgD,OAAOH,EAAEI,OAAO5B,OAAS,IAAM,EAC1BqB,UAKf,6BACkB,WAAfvB,EAAMpB,MACL,uBACE4C,KAAK,OACLtB,MAAOF,EAAMlB,KACb2C,SAAU,SAACC,GACTxC,GAAkB,SAACoC,GACjB,IAAMC,EAAQ,YAAOD,GAMrB,OALoBC,EAASI,MAC3B,SAACC,GAAD,OAAOA,EAAEhD,OAASoB,EAAMpB,QAEbE,KACX+C,OAAOH,EAAEI,OAAO5B,OAAS,IAAM,EAC1BqB,YApCVvB,EAAMpB,cA+CvB,qDAAwBiC,EAAgBF,GAAxC,aAEF,sBAAKI,UAAU,MAAf,UACE,wBACA,wBACA,iDAAoBF,EAAgBD,GAApC,oBCnTGoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.63b2d6b7.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport \"./App.css\";\n\nconst cells = [\n  \"Autonomy\",\n  \"Delivery\",\n  \"Growth\",\n  \"Job knowledge\",\n  \"Soft skills\",\n];\n\nconst teamLeadCells = [\n  \"Hiring\",\n  \"TechLead\",\n  \"Team management\",\n  \"Soft skills\",\n  \"Mentoring\",\n];\n\nexport const times = (count: number) => Array.from(Array(count).keys());\n\nfunction App() {\n  const [levels, setLevels] = useState([\n    { name: \"JUNIOR_1\", low: 1000 },\n    { name: \"JUNIOR_2\", low: 1000, high: 1500 },\n    { name: \"DEV_1\", low: 1500, high: 1850 },\n    { name: \"DEV_2\", low: 1850, high: 2200 },\n    { name: \"SENIOR_1\", low: 2200, high: 2800 },\n    { name: \"SENIOR_2\", low: 2800, high: 3400 },\n  ]);\n\n  const [teamLeadLevels, setTeamLeadLevels] = useState([\n    { name: \"LEAD_1\", low: 500 },\n    { name: \"LEAD_2\", low: 500, high: 1000 },\n  ]);\n\n  const [isTeamLead, setIsTeamLead] = useState(false);\n\n  const [selected, setSelected] = useState([0, 0, 0, 0, 0]);\n  const [teamLeadSelected, setTeamLeadSelected] = useState([0, 0, 0, 0, 0]);\n\n  const cellValues = useMemo(() => {\n    const junior1Values = [\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n    ];\n\n    return [\n      junior1Values,\n      ...levels.slice(1).map((level) => {\n        const range = level.high! - level.low;\n        const value = Math.floor(range / cells.length);\n        return times(cells.length + 1).map(() => value);\n      }),\n    ];\n  }, [levels]);\n\n  const teamLeadCellValues = useMemo(() => {\n    const lead11Values = [\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n      Math.floor(teamLeadLevels[0].low / teamLeadCells.length),\n    ];\n\n    return [\n      lead11Values,\n      ...teamLeadLevels.slice(1).map((level) => {\n        const range = level.high! - level.low;\n        const value = Math.floor(range / teamLeadCells.length);\n        return times(teamLeadCells.length + 1).map(() => value);\n      }),\n    ];\n  }, [teamLeadLevels]);\n\n  const salary = useMemo(() => {\n    return selected.reduce((acc, cur, index) => {\n      const z = times(cur + 1);\n      return (\n        acc +\n        z.reduce((x, y) => {\n          return x + cellValues[y][index];\n        }, 0)\n      );\n    }, 0);\n  }, [cellValues, selected]);\n\n  const teamLeadSalary = useMemo(() => {\n    return teamLeadSelected.reduce((acc, cur, index) => {\n      const z = times(cur + 1);\n      return (\n        acc +\n        z.reduce((x, y) => {\n          return x + teamLeadCellValues[y][index];\n        }, 0)\n      );\n    }, 0);\n  }, [teamLeadCellValues, teamLeadSelected]);\n\n  const totalSalary = salary + teamLeadSalary;\n\n  const getSalaryRanges = (sal: number) => {\n    return `${sal - sal * 0.1} - ${sal + sal * 0.1}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"Row\">\n        <table>\n          <thead>\n            <tr>\n              <th>Level</th>\n              {cells.map((cell) => (\n                <th key={cell}>{cell}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {levels.map((level, levelIndex) => (\n              <tr key={level.name}>\n                <td>{level.name}</td>\n                {cells.map((cell, cellIndex) => (\n                  <td\n                    key={cell}\n                    style={\n                      levelIndex <= selected[cellIndex]\n                        ? { background: \"lightblue\" }\n                        : {}\n                    }\n                    onClick={() =>\n                      setSelected((prevState) => {\n                        const newState = [...prevState];\n                        newState[cellIndex] = levelIndex;\n                        return newState;\n                      })\n                    }\n                  >\n                    {cellValues[levelIndex][cellIndex]}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <table>\n          <thead>\n            <tr>\n              <th>Level</th>\n              <th>Low</th>\n              <th>High</th>\n            </tr>\n          </thead>\n          <tbody>\n            {levels.map((level) => {\n              return (\n                <tr key={level.name}>\n                  <td>\n                    {level.name === \"JUNIOR_1\"\n                      ? `${level.name} (Base)`\n                      : level.name}\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={level.low}\n                      onChange={(e) => {\n                        setLevels((prevState) => {\n                          const newState = [...prevState];\n                          const levelToEdit = newState.find(\n                            (l) => l.name === level.name\n                          );\n                          levelToEdit!.low = Number(e.target.value || 0) || 0;\n                          return newState;\n                        });\n                      }}\n                    />\n                  </td>\n                  <td>\n                    {level.name !== \"JUNIOR_1\" && (\n                      <input\n                        type=\"text\"\n                        value={level.high}\n                        onChange={(e) => {\n                          setLevels((prevState) => {\n                            const newState = [...prevState];\n                            const levelToEdit = newState.find(\n                              (l) => l.name === level.name\n                            );\n                            levelToEdit!.high =\n                              Number(e.target.value || 0) || 0;\n                            return newState;\n                          });\n                        }}\n                      />\n                    )}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <div>Salary: {getSalaryRanges(salary)} EUR</div>\n      </div>\n      <div className=\"Row\">\n        <div>\n          <div>Is team lead?</div>\n          <input\n            type=\"checkbox\"\n            checked={isTeamLead}\n            onChange={(e) => {\n              setIsTeamLead(!isTeamLead);\n            }}\n          />\n        </div>\n      </div>\n      {isTeamLead && (\n        <>\n          <div className=\"Row\">\n            <table>\n              <thead>\n                <tr>\n                  <th></th>\n                  {teamLeadCells.map((cell) => (\n                    <th key={cell}>{cell}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {teamLeadLevels.map((level, levelIndex) => (\n                  <tr key={level.name}>\n                    <td>{level.name}</td>\n                    {teamLeadCells.map((cell, cellIndex) => (\n                      <td\n                        key={cell}\n                        style={\n                          levelIndex <= teamLeadSelected[cellIndex]\n                            ? { background: \"lightblue\" }\n                            : {}\n                        }\n                        onClick={() =>\n                          setTeamLeadSelected((prevState) => {\n                            const newState = [...prevState];\n                            newState[cellIndex] = levelIndex;\n                            return newState;\n                          })\n                        }\n                      >\n                        {teamLeadCellValues[levelIndex][cellIndex]}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <table>\n              <thead>\n                <tr>\n                  <th>Level</th>\n                  <th>Low</th>\n                  <th>High</th>\n                </tr>\n              </thead>\n              <tbody>\n                {teamLeadLevels.map((level) => {\n                  return (\n                    <tr key={level.name}>\n                      <td>\n                        {level.name === \"LEAD_1\"\n                          ? `${level.name} (Base)`\n                          : level.name}\n                      </td>\n                      <td>\n                        <input\n                          type=\"text\"\n                          value={level.low}\n                          onChange={(e) => {\n                            setTeamLeadLevels((prevState) => {\n                              const newState = [...prevState];\n                              const levelToEdit = newState.find(\n                                (l) => l.name === level.name\n                              );\n                              levelToEdit!.low =\n                                Number(e.target.value || 0) || 0;\n                              return newState;\n                            });\n                          }}\n                        />\n                      </td>\n                      <td>\n                        {level.name !== \"LEAD_1\" && (\n                          <input\n                            type=\"text\"\n                            value={level.high}\n                            onChange={(e) => {\n                              setTeamLeadLevels((prevState) => {\n                                const newState = [...prevState];\n                                const levelToEdit = newState.find(\n                                  (l) => l.name === level.name\n                                );\n                                levelToEdit!.high =\n                                  Number(e.target.value || 0) || 0;\n                                return newState;\n                              });\n                            }}\n                          />\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n            <div>Team lead salary: {getSalaryRanges(teamLeadSalary)} EUR</div>\n          </div>\n          <div className=\"Row\">\n            <div />\n            <div />\n            <div>Total salary: {getSalaryRanges(totalSalary)} EUR</div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}