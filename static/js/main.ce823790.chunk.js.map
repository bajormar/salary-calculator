{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["cells","times","count","Array","from","keys","App","useState","name","low","high","levels","setLevels","selected","setSelected","cellValues","useMemo","Math","floor","length","slice","map","level","range","value","salary","reduce","acc","cur","index","x","y","className","cell","levelIndex","cellIndex","style","background","onClick","prevState","newState","type","onChange","e","find","l","Number","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce823790.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport \"./App.css\";\n\nconst cells = [\n  \"Autonomy\",\n  \"Delivery\",\n  \"Growth\",\n  \"Job knowledge\",\n  \"Soft skills\",\n];\n\nexport const times = (count: number) => Array.from(Array(count).keys());\n\nfunction App() {\n  const [levels, setLevels] = useState([\n    { name: \"JUNIOR_1\", low: 1000 },\n    { name: \"JUNIOR_2\", low: 1000, high: 1500 },\n    { name: \"DEV_1\", low: 1500, high: 1850 },\n    { name: \"DEV_2\", low: 1850, high: 2200 },\n    { name: \"SENIOR_1\", low: 2200, high: 2800 },\n    { name: \"SENIOR_2\", low: 2800, high: 3400 },\n  ]);\n\n  const [selected, setSelected] = useState([0, 0, 0, 0, 0]);\n\n  const cellValues = useMemo(() => {\n    const junior1Values = [\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n      Math.floor(levels[0].low / cells.length),\n    ];\n\n    return [\n      junior1Values,\n      ...levels.slice(1).map((level) => {\n        const range = level.high! - level.low;\n        const value = Math.floor(range / cells.length);\n        return times(cells.length + 1).map(() => value);\n      }),\n    ];\n  }, [levels]);\n\n  const salary = useMemo(() => {\n    return selected.reduce((acc, cur, index) => {\n      const z = times(cur + 1);\n      return (\n        acc +\n        z.reduce((x, y) => {\n          return x + cellValues[y][index];\n        }, 0)\n      );\n    }, 0);\n  }, [cellValues, selected]);\n\n  return (\n    <div className=\"App\">\n      <table>\n        <thead>\n          <tr>\n            <th>Level</th>\n            {cells.map((cell) => (\n              <th key={cell}>{cell}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {levels.map((level, levelIndex) => (\n            <tr key={level.name}>\n              <td>{level.name}</td>\n              {cells.map((cell, cellIndex) => (\n                <td\n                  key={cell}\n                  style={\n                    levelIndex <= selected[cellIndex]\n                      ? { background: \"lightblue\" }\n                      : {}\n                  }\n                  onClick={() =>\n                    setSelected((prevState) => {\n                      const newState = [...prevState];\n                      newState[cellIndex] = levelIndex;\n                      return newState;\n                    })\n                  }\n                >\n                  {cellValues[levelIndex][cellIndex]}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <table>\n        <thead>\n          <tr>\n            <th>Level</th>\n            <th>Low</th>\n            <th>High</th>\n          </tr>\n        </thead>\n        <tbody>\n          {levels.map((level) => {\n            return (\n              <tr key={level.name}>\n                <td>\n                  {level.name === \"JUNIOR_1\"\n                    ? `${level.name} (Base)`\n                    : level.name}\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    value={level.low}\n                    onChange={(e) => {\n                      setLevels((prevState) => {\n                        const newState = [...prevState];\n                        const levelToEdit = newState.find(\n                          (l) => l.name === level.name\n                        );\n                        levelToEdit!.low = Number(e.target.value || 0) || 0;\n                        return newState;\n                      });\n                    }}\n                  />\n                </td>\n                <td>\n                  {level.name !== \"JUNIOR_1\" && (\n                    <input\n                      type=\"text\"\n                      value={level.high}\n                      onChange={(e) => {\n                        setLevels((prevState) => {\n                          const newState = [...prevState];\n                          const levelToEdit = newState.find(\n                            (l) => l.name === level.name\n                          );\n                          levelToEdit!.high = Number(e.target.value || 0) || 0;\n                          return newState;\n                        });\n                      }}\n                    />\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <div>\n        Salary: {salary} ({salary - salary * 0.1} - {salary + salary * 0.1}) EUR\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}